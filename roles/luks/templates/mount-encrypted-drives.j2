#!/bin/bash

# A ansible templated script to mount all encrypted drives

# This script makes a few assumptions:
# * The drives all share the same passphrase
# * No external security device is used (think TOTP or HOTP or GPG)
# * All drives are to be mounted in their same respective paths
# * All drives are to be mounted, not a subset
# * The order of all arrays here needs to be preserved
#   * The order represents an ordered set of originating block devices/volumes

rd='\e[1;31m'   #'0;31' is Red's ANSI color code
gr='\e[1;32m'   #'0;32' is Green's ANSI color code
yl='\e[1;33m'   #'1;33' is Yellow's ANSI color code
bl='\e[1;34m'   #'0;34' is Blue's ANSI color code
nc='\e[0m'   #'0;30' is no color

set +e # keep executing on errors

echo
echo "This script will unlock and mount {{ luks_mappings | count }} encrypted mount points."
echo "These are the mount points:"
{% for item in luks_mappings %}
echo -e "${bl}{{ item.mount }}${nc}"
{% endfor %}
echo

echo "First, unlock sudo access if necessary by entering the password..."
sudo echo -e "${gr}Unlocked sudo!${nc}"
echo

luksKey=$1
if [[ $# -lt 1 ]]; then
    echo "Next, enter the common passphrase for all these luks containers..."
    printf "${yl}"
    read -sp "Enter the common LUKS passphrase: " luksKey
fi
echo -e $nc

echo "Now, these LUKS mappings will be unlocked and mapped to /dev/mapper/"
{% for item in luks_mappings | unique('attribute', 'block_id') %}
echo -e "${bl}blkid: {{ item.block_id | truncate(13) }}... => /dev/mapper/{{ item.luks_map }}"
{% endfor %}
echo -e "$nc"

{% for item in luks_mappings | unique('attribute', 'block_id') %}
echo "Unlocking container mapped to LUKS map {{ item.luks_map }}"
echo $luksKey | sudo cryptsetup open /dev/disk/by-uuid/{{ item.block_id }} {{ item.luks_map }} \
    && echo -e "${gr}Successfully unlocked LUKS container map {{ item.luks_map }}" \
    || echo -e "${rd}There was a problem unlocking {{ item.luks_map }}"; \
    echo -e "${yl}Is the device already mounted? Is it a valid volume UUID?";
echo -e $nc; echo

{% endfor %}
echo

