#!/bin/bash

# A ansible templated script to mount all encrypted drives

# This script makes a few assumptions:
# * The drives all share the same passphrase
# * No external security device is used (think TOTP or HOTP or GPG)
# * All drives are to be mounted in their same respective paths
# * All drives are to be mounted, not a subset
# * The order of all arrays here needs to be preserved
#   * The order represents an ordered set of originating block devices/volumes

rd='\e[1;31m'   #'0;31' is Red's ANSI color code
gr='\e[1;32m'   #'0;32' is Green's ANSI color code
yl='\e[1;33m'   #'1;33' is Yellow's ANSI color code
bl='\e[1;34m'   #'0;34' is Blue's ANSI color code
nc='\e[0m'   #'0;30' is no color

# Ternary print with colors on exit code passed as first arg, second arg is message for success, third is fail
print_success_or_fail () {
    if [ $1 -eq 0 ]; then
        echo -e "${gr}$2${nc}"
    else
        echo -e "${rd}$3${nc}"
    fi
}

set +e # keep executing on errors

echo
echo "This script will unlock and mount these {{ luks_mappings | count }} encrypted mount points."
{% for item in luks_mappings %}
echo -e "${bl}{{ item.mount }}${nc}"
{% endfor %}
echo

echo "First, unlock sudo access if necessary by entering the password..."
sudo echo -e "${gr}Unlocked sudo!${nc}"

luksKey=$1
if [[ $# -lt 1 ]]; then
    echo "Next, enter the common passphrase for all these luks containers..."
    printf "${yl}"
    read -sp "Enter the common LUKS passphrase: " luksKey
fi

echo
echo "These LUKS mappings will be unlocked and mapped to /dev/mapper/"
echo "==============================================================="
{% for item in luks_mappings | unique('attribute', 'luks_id') %}
{% if item.luks_id is not none %}
echo -e "${bl}{{ item.luks_id }} => /dev/mapper/{{ item.luks_map }}"
{% endif %}
{% endfor %}

# Activate LVM volumes for LUKS on LVM
# ======================================
echo "Activating all LVM logical volumes for LUKS on LVM configurations!"
{% for item in luks_mappings %}
{% if not item.lvm_on_luks %}
{% if item.volume_group is not none and item.logical_volume is not none %}
_VG_LV={{ item.volume_group }}/{{ item.logical_volume }}
_LV_STAT=$(sudo lvchange -ay $_VG_LV)
print_success_or_fail $? "Succesfully activated $_VG_LV!" "ERROR: $_LV_STAT"

{% endif %}
{% endif %}
{% endfor %}
echo

# Unlock the LUKS containers
#===========================
echo "Unlocking all those LUKS volumes and mapping them to /dev/mapper/"
{% for item in luks_mappings | unique('attribute', 'luks_id') %}
_LUKS_STAT=$(echo $luksKey | sudo cryptsetup open \
    /dev/disk/by-uuid/{{ item.luks_id }} {{ item.luks_map }} 2>&1)
print_success_or_fail $? "Succesfully unlocked LUKS volume {{ item.luks_map }} !" \
    "ERROR: $_LUKS_STAT"

{% endfor %}

# Activate LVM volumes for LVM on LUKS
# ======================================
echo "Activating all LVM logical volumes for LVM on LUKS configurations!"
{% for item in luks_mappings %}
{% if item.lvm_on_luks %}
{% if item.volume_group is not none and item.logical_volume is not none %}
_VG_LV={{ item.volume_group }}/{{ item.logical_volume }}
_LV_STAT=$(sudo lvchange -ay $_VG_LV)
print_success_or_fail $? "Succesfully activated $_VG_LV!" "ERROR: $_LV_STAT"

{% endif %}
{% endif %}
{% endfor %}
echo

# Mount the volumes to their mount paths and options
# TODO make this LVM on LUKS aware
#===================================================
echo
echo "These mount points will be mounted by their respective volumes:"
echo "==============================================================="
{% for item in luks_mappings | unique('attribute', 'mount') %}
echo -e "${bl}{{ item.luks_map }} => \
{{ item.mount }} ({{ item.mount_opts | default('defaults') }})${nc}"
{% endfor %}

echo "Mounting the volumes to their mount paths..."
{% for item in luks_mappings | unique('attribute', 'mount') %}
_MOUNT_STAT=$(sudo mount /dev/mapper/{{ item.luks_map }} {{ item.mount }} \
    -o {{ item.mount_opts | default('defaults') }} 2>&1)
print_success_or_fail $? "Succesfully mounted volume {{ item.mount }} !" "ERROR: $_MOUNT_STAT"

{% endfor %}
echo
