#!/bin/bash

# A ansible templated script to mount all encrypted drives

# This script makes a few assumptions:
# * The drives all share the same passphrase
# * No external security device is used (think TOTP or HOTP or GPG)
# * All drives are to be mounted in their same respective paths
# * All drives are to be mounted, not a subset
# * The order of all arrays here needs to be preserved
#   * The order represents an ordered set of originating block devices/volumes

rd='\e[1;31m'   #'0;31' is Red's ANSI color code
gr='\e[1;32m'   #'0;32' is Green's ANSI color code
yl='\e[1;33m'   #'1;33' is Yellow's ANSI color code
bl='\e[1;34m'   #'0;34' is Blue's ANSI color code
nc='\e[0m'   #'0;30' is no color

set +e # keep executing on errors

echo
echo "This script will unlock and mount {{ luks_mappings | count }} encrypted mount points."
echo "These are the mount points:"
{% for item in luks_mappings %}
echo -e "${bl}{{ item.mount }}${nc}"
{% endfor %}
echo

echo "First, unlock sudo access if necessary by entering the password..."
sudo echo -e "${gr}Unlocked sudo!${nc}"
echo

luksKey=$1
if [[ $# -lt 1 ]]; then
    echo "Next, enter the common passphrase for all these luks containers..."
    printf "${yl}"
    read -sp "Enter the common LUKS passphrase: " luksKey
fi
echo -e $nc

# Activate LVM volumes for LUKS on LVM
# ======================================
echo "Activating all LVM logical volumes for LUKS on LVM configurations!"
{% for item in luks_mappings %}
{% if not item.lvm_on_luks %}
{% if item.volume_group is not none and item.logical_volume is not none %}
sudo lvchange -ay {{ item.volume_group }}/{{ item.logical_volume }} \
    && echo -e "${gr}Successfully activated {{ item.volume_group }}/{{ item.logical_volume }}!${nc}" \
    || echo -e "${rd}Failed to activate volume {{item.volume_group }}/{{ item.logical_volume }}!${nc}"
echo

{% endif %}
{% endif %}
{% endfor %}
echo

# Unlock the LUKS containers
#===========================
echo "Now, these LUKS mappings will be unlocked and mapped to /dev/mapper/"
{% for item in luks_mappings | unique('attribute', 'luks_id') %}
{% if item.luks_id is not none %}
echo -e "${bl}{{ item.luks_id }} => /dev/mapper/{{ item.luks_map }}"
{% endif %}
{% endfor %}
echo -e "$nc"

_LUKS_SUCCESS="${gr}Successfully unlocked LUKS container!${nc}"
_LUKS_FAIL="${rd}There was a problem unlocking this container!${nc}"
_LUKS_SUGGEST="${yl}Is the device already mounted?\
Is the volume UUID valid? Is the passphrase correct?${nc}"
{% for item in luks_mappings | unique('attribute', 'luks_id') %}
echo "Unlocking container mapped to LUKS map {{ item.luks_map }}"
echo $luksKey | sudo cryptsetup open /dev/disk/by-uuid/{{ item.luks_id }} {{ item.luks_map }} \
    && echo -e ${_LUKS_SUCCESS} || echo -e "${_LUKS_FAIL}\n${_LUKS_SUGGEST}"
echo -e $nc

{% endfor %}
echo

# Activate LVM volumes for LVM on LUKS
# ======================================
echo "Activating all LVM logical volumes for LUKS on LVM configurations!"
{% for item in luks_mappings %}
{% if item.lvm_on_luks %}
{% if item.volume_group is not none and item.logical_volume is not none %}
sudo lvchange -ay {{ item.volume_group }}/{{ item.logical_volume }} \
    && echo -e "${gr}Successfully activated {{ item.volume_group }}/{{ item.logical_volume }}!${nc}" \
    || echo -e "${rd}Failed to activate volume {{item.volume_group }}/{{ item.logical_volume }}!${nc}"
echo

{% endif %}
{% endif %}
{% endfor %}
echo

# Mount the volumes to their mount paths and options
#===================================================
echo "These mount points will be mounted by their respective volumes:"
{% for item in luks_mappings | unique('attribute', 'mount') %}
echo -e "${bl}{{ item.luks_map }} => {{ item.mount }} ({{ mount_opts | default('defaults') }})${nc}"
{% endfor %}
echo

_MOUNT_SUCCESS="${gr}Succesfully mounted volume$!{nc}"
_MOUNT_FAIL="${rd}ERROR: Something went wrong mounting this drive!\n${bl}Skipping...${nc}"
{% for item in luks_mappings | unique('attribute', 'mount') %}
echo -e "Mounting ${bl}{{ item.mount }}${nc} with opts ${bl}{{ item.mount_opts | default('defaults') }}${nc}"
sudo mount /dev/mapper/{{ item.luks_map }} {{ item.mount }} \
    -o {{ item.mount_opts | default('defaults') }} && echo -e $_MOUNT_SUCCESS || echo -e $_MOUNT_FAIL
echo

{% endfor %}
echo
