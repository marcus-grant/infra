#!/bin/bash

# A ansible templated script to UNmount all encrypted drives

# This script makes a few assumptions:
# * The drives all share the same passphrase
# * No external security device is used (think TOTP or HOTP or GPG)
# * All drives are to be mounted in their same respective paths
# * All drives are to be mounted, not a subset
# * The order of all arrays here needs to be preserved
#   * The order represents an ordered set of originating block devices/volumes

rd='\e[1;31m'   #'0;31' is Red's ANSI color code
gr='\e[1;32m'   #'0;32' is Green's ANSI color code
yl='\e[1;33m'   #'1;33' is Yellow's ANSI color code
bl='\e[1;34m'   #'0;34' is Blue's ANSI color code
nc='\e[0m'   #'0;30' is no color

set +e # keep executing on errors

echo
echo "This script will (RE)lock and (UN)mount {{ luks_mappings | count }} encrypted mount points."
echo "These are the mount points:"
{% for item in luks_mappings | reverse %}
echo -e "${bl}{{ item.mount }}${nc}"
{% endfor %}
echo

echo "First, unlock sudo access if necessary by entering the password..."
sudo echo -e "${gr}Unlocked sudo!${nc}"
echo

echo "(RE)locking all the LUKS container mappings..."
echo

{% for item in luks_mappings | unique('attribute', 'luks_map') | reverse %}
echo "(RE)locking container mapped to LUKS map {{ item.luks_map }}"
_LUKS_SUCCESS_MSG="${gr}Successfully closed LUKS container mapped to /dev/mapper/{{ item.luks_map }}${nc}"
_LUKS_FAIL_MSG="${rd}ERROR: {{ item.luks_map }} is not a valid or opened LUKS device\n"
_LUKS_FAIL_MSG="${_LUKS_FAIL_MSG}${yl}Was it already locked? Was it renamed? Was it entered incorrectly in ansible's variables?"
_LUKS_FAIL_MSG="${_LUKS_FAIL_MSG}\n${bl}Skipping...${nc}"
sudo cryptsetup close {{ item.luks_map }} \
    && echo -e "${_LUKS_SUCCESS_MSG}${nc}" || echo -e "${_LUKS_FAIL_MSG}${nc}"
echo -e $nc

{% endfor %}

# echo "Now, these LUKS mappings will be unlocked and mapped to /dev/mapper/"
# {% for item in luks_mappings %}
# echo "blkid: {{ item.luks_id }} => /dev/mapper/{{ item.luks_map }}"
# {% endfor%}