#!/bin/bash

# A ansible templated script to UNmount all encrypted drives

# This script makes a few assumptions:
# * The drives all share the same passphrase
# * No external security device is used (think TOTP or HOTP or GPG)
# * All drives are to be mounted in their same respective paths
# * All drives are to be mounted, not a subset
# * The order of all arrays here needs to be preserved
#   * The order represents an ordered set of originating block devices/volumes

rd='\e[1;31m'   #'0;31' is Red's ANSI color code
gr='\e[1;32m'   #'0;32' is Green's ANSI color code
yl='\e[1;33m'   #'1;33' is Yellow's ANSI color code
bl='\e[1;34m'   #'0;34' is Blue's ANSI color code
nc='\e[0m'   #'0;30' is no color

set +e # keep executing on errors

echo
echo "This script will (RE)lock and (UN)mount {{ luks_mappings | count }} encrypted mount points."
echo "These are the mount points:"
{% for item in luks_mappings | reverse %}
echo -e "${bl}{{ item.mount }}${nc}"
{% endfor %}
echo

echo "First, unlock sudo access if necessary by entering the password..."
sudo echo -e "${gr}Unlocked sudo!${nc}"
echo

# UNmount the volumes to their mount paths and options
#===================================================
_MOUNT_SUCCESS="${gr}Succesfully UNmounted volume!${nc}"
_MOUNT_FAIL="${rd}ERROR: "
{% for item in luks_mappings | unique('attribute', 'mount') %}
echo -e "UNmounting ${bl}{{ item.mount }}${nc}"
_MOUNT_STAT=$(sudo umount {{ item.mount }} 2>&1)
if [ $? -eq 0 ]; then echo -e $_MOUNT_SUCCESS; else echo -e "$_MOUNT_FAIL$_MOUNT_STAT$nc"; fi
echo -e $nc
# echo -e "UNmounting ${bl}{{ item.mount }}${nc}"
# sudo umount {{ item.mount }} && echo -e $_MOUNT_SUCCESS || echo -e $_MOUNT_FAIL
# echo

{% endfor %}
echo


# RElock the LUKS volumes
#========================
echo "(RE)locking all the LUKS container volumes..."
_LUKS_SUCCESS="${gr}Successfully closed LUKS container!${nc}"
_LUKS_FAIL="${rd}ERROR: "
{% for item in luks_mappings | unique('attribute', 'luks_map') | reverse %}
{% if item.luks_id is not none %}
echo -e "RElocking container mapped to LUKS map ${bl}{{ item.luks_map }}${nc}"
_LUKS_STAT=$(sudo cryptsetup close {{ item.luks_map }} 2>&1)
if [ $? -eq 0 ]; then echo -e $_LUKS_SUCCESS; else echo -e "$_LUKS_FAIL$_LUKS_STAT$nc"; fi
echo -e $nc

{% endif %}
{% endfor %}