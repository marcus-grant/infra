---
# tasks file for marcus_grant.dev.python
# become: "{{ not ansible_facts['os_family'] == 'Darwin' }}"
#
- name: Install python
  become: "{{ not ansible_facts['os_family'] == 'Darwin' }}"
  ansible.builtin.package:
    name: "{{ pyenv_py_pkg }}"
    state: present
  loop_control: {loop_var: pyenv_py_pkg}
  loop: >
    {{ (pyenv_py_pkgs[ansible_os_family] |
      default(pyenv_py_pkgs_d)) +
      pyenv_extra_sys_pkgs }}
  when: pyenv_install_sys_py

- name: Install pyenv dependencies via package manager
  become: "{{ not ansible_facts['os_family'] == 'Darwin' }}"
  ansible.builtin.package:
    name: "{{ pyenv_dep }}"
    state: present
  loop_control: {loop_var: pyenv_dep}
  loop: "{{ pyenv_deps[ansible_os_family] | default([]) }}"
  register: pyenv_installed_deps
  when: ansible_os_family in pyenv_deps | default(false)

- name: Install PyEnv via curl & bash
  ansible.builtin.shell:
    cmd: 'set -o pipefail;export PYENV_ROOT="{{ pyenv_root }}";curl https://pyenv.run|bash'
    creates: "{{ pyenv_root }}/bin/pyenv"

- name: Check stat of pyenv_profile_d_path
  ansible.builtin.stat:
    path: "{{ pyenv_profile_d_path }}"
  register: pyenv_profile_d_reg
  when: pyenv_profile_d_path is defined

- name: Template a profile.d script to set pyenv environment variables
  ansible.builtin.template:
    src: pyenv.profile.sh.j2
    dest: "{{ pyenv_profile_d_path }}/{{ pyenv_priority | string }}-pyenv.sh"
    owner: "{{ ansible_user }}"
    mode: '0640'
  when:
    - pyenv_profile_d_path is defined
    - pyenv_profile_d_reg.stat.isdir

- name: Prepend pyenv_root to path in given shell file
  ansible.builtin.lineinfile:
    path: "{{ pyenv_add_path_file }}"
    search_string: 'export PATH="{{ pyenv_root }}"'
    line: "export PATH={{ pyenv_root }}/bin:$PATH"
  when: pyenv_add_path_file is defined

- name: Add pyenv init command to path in given shell file
  ansible.builtin.lineinfile:
    path: "{{ pyenv_add_path_file }}"
    search_string: 'eval "$(pyenv init -)"'
    line: 'eval "$(pyenv init -)"'
  when: pyenv_add_path_file is defined and pyenv_init

- name: Reload shell session to include Pyenv
  ansible.builtin.shell:
    cmd: |
      export PYENV_ROOT="{{ pyenv_root }}"
      export PATH="{{ pyenv_root }}/bin:$PATH"
      eval "$(pyenv init --path)"
      eval "$(pyenv init -)"
      {{ pyenv_root }}/bin/pyenv rehash
  environment:
    PYENV_ROOT: "{{ pyenv_root }}"
    PATH: "{{ pyenv_root }}/bin:{{ ansible_env.PATH }}"
  changed_when: false

- name: Determine pyenv installed versions
  ansible.builtin.command:
    cmd: "{{ pyenv_root }}/bin/pyenv versions --bare"
  changed_when: false
  register: pyenv_installed_versions

- name: Install pyenv versions not installed
  ansible.builtin.command:
    cmd: "{{ pyenv_root }}/bin/pyenv install {{ item }}"
    creates: "{{ pyenv_root }}/versions/{{ item }}"
  loop: >-
    {{
      pyenv_versions |
      difference(
        pyenv_installed_versions.stdout_lines |
        default([])
      )
    }}
  loop_control:
    label: "{{ item }}"
  register: pyenv_install_result

- name: Get current pyenv global version, just the semver string
  ansible.builtin.command:
    cmd: "{{ pyenv_root }}/bin/pyenv global"
  register: pyenv_version_global_current
  changed_when: false

- name: Set global pyenv version
  ansible.builtin.command:
    cmd: "{{ pyenv_root }}/bin/pyenv global {{ pyenv_version_global }}"
  changed_when: not pyenv_version_global in pyenv_version_global_current.stdout

